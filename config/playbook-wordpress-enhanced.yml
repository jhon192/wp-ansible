- name: Robust Multi-Domain WordPress Setup
  hosts: localhost
  become: true
  vars:
    ansible_remote_tmp: "/tmp/.ansible-123324453"
    wordpress_sites:
      - domain: "{{ DOMAIN }}"
        host: "{{ HOST }}"
        db_name: "{{ DB_NAME }}"
        db_user: "{{ DB_USER }}"
        db_pass: "{{ DB_PASS }}"
        access_db_user: "{{ ACCESS_DB_USER }}"
        access_db_pass: "{{ ACCESS_DB_PASS }}"
        wp_admin_user: "{{  WP_ADMIN_USER }}"
        wp_admin_pass: "{{ WP_ADMIN_PASS }}"
        wp_admin_email: "{{ WP_ADMIN_EMAIL }}"
        website_name: "{{ WEBSITE_NAME }}"
        linux_user: "{{ LINUX_USER }}"

      # - domain: example1.com
      #   host: example1.com
      #   db_name: wp_example1
      #   db_user: wpuser1
      #   db_pass: SecurePass1!
      #   wp_admin_user: admin1
      #   wp_admin_pass: AdminPass1!
      #   wp_admin_email: admin1@example.com
      #   website_name: sites1
      #   linux_user: user1

  tasks:
    - name: Debug all variables
      debug:
        var: item
      loop: "{{ wordpress_sites }}"

    # - name: Install Dependencies (Apache, PHP, MariaDB, WP-CLI)
    #   apt:
    #     name:
    #       - apache2
    #       - php
    #       - php-mysql
    #       - libapache2-mod-php
    #       - mariadb-server
    #       - mariadb-client
    #       - python3-mysqldb
    #       - unzip
    #       - curl
    #     update_cache: yes
    #     state: present

    - name: Install Apache, PHP, and WP-CLI Dependencies
      apt:
        name:
          - apache2
          - php
          - php-mysql
          - libapache2-mod-php
          - curl
          - less
          - mariadb-server
          - mariadb-client
          - python3-mysqldb
          - unzip
        state: present

    - name: Ensure Apache modules enabled
      apache2_module:
        name: "{{ item }}"
        state: present
      loop:
        - rewrite
        - proxy
        - proxy_http
        - ssl
        - headers

    - name: Start and Enable MariaDB
      service:
        name: mariadb
        state: started
        enabled: true

    # put these tasks before the first WordPress site is deployed
    - name: Fix /home/semaphore ownership/perms so both Ansible and Apache work
      block:
        - file:
            path: /home/semaphore
            owner: semaphore
            group: www-data
            state: directory
        - file:
            path: /home/semaphore
            mode: '0750'
            state: directory

    # - name: Configure firewall to allow each site port
    #   ufw:
    #     rule: allow
    #     port: "{{ item.port }}"
    #     proto: tcp
    #   loop: "{{ wordpress_sites }}"

    # - name: Add custom Listen ports to /etc/apache2/ports.conf
    #   lineinfile:
    #     path: /etc/apache2/ports.conf
    #     line: "Listen {{ item.port }}"
    #     insertafter: EOF
    #     state: present
    #   loop: "{{ wordpress_sites }}"

    - name: Deploy each WordPress site
      include_tasks: wordpress_site_setup.yml
      loop: "{{ wordpress_sites }}"
      loop_control:
        loop_var: site

    - name: Install theme via WP-CLI
      command: >
        wp theme install https://downloads.wordpress.org/theme/onepress.2.3.12.zip
        --path=/home/semaphore/{{ site.domain }}
        --allow-root
      args:
        chdir: /usr/local/bin
      loop: "{{ wordpress_sites }}"
      loop_control:
        loop_var: site

    - name: Activate theme via WP-CLI
      command: >
        wp theme activate onepress
        --path=/home/semaphore/{{ site.domain }}
        --allow-root
      args:
        chdir: /usr/local/bin
      loop: "{{ wordpress_sites }}"
      loop_control:
        loop_var: site

- name: Create “Home” page via WP-CLI (only if it doesn’t exist)
  shell: |
    # ¿Hay ya una página con título “Home”?
    PAGE_ID=$(wp post list \
                 --post_type=page \
                 --title='Home' \
                 --field=ID \
                 --path=/home/semaphore/{{ site.domain }} \
                 --allow-root)

    # Si no existe, la creamos publicada con slug "home"
    if [ -z "$PAGE_ID" ]; then
      wp post create \
        --post_type=page \
        --post_title='Home' \
        --post_name='home' \
        --post_status=publish \
        --path=/home/semaphore/{{ site.domain }} \
        --allow-root
    fi
  args:
    chdir: /usr/local/bin          # igual que las tareas anteriores
  register: home_page_cmd
  changed_when: "'Success:' in home_page_cmd.stdout"   # Solo marca “changed” si se creó
  loop: "{{ wordpress_sites }}"
  loop_control:
    loop_var: site
