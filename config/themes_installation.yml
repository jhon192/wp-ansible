---
# ---------------------------------------------------------------
# Included by bootstrap-wordpress.yml for each item in wordpress_sites
# Expects "site" dict plus the global vars (theme_slug, starter_pages…)
# ---------------------------------------------------------------

# ─── Local convenience vars ─────────────────────────────────── #
- name: set locals vars from website
  set_fact:
    wp_path: "/home/semaphore/{{ site.domain }}"
    linux_owner: "{{ site.linux_user | default('www-data') }}"
    template: "{{ site.template_id | default('68423') }}"

# # ─── Ensure doc-root exists & correct owner ‐ optional ───────── #
# - name: Ensure {{ wp_path }} exists
#   file:
#     path: "{{ wp_path }}"
#     state: directory
#     owner: "{{ linux_owner }}"
#     mode: "0755"

# (Assumption: core download / config / install already done earlier.)

# ─── THEME ───────────────────────────────────────────────────── #
- name: Install & activate {{ theme_slug }} for {{ site.domain }}
  shell: |
    wp theme is-installed {{ theme_slug }} --allow-root --path={{ wp_path }} \
    || wp theme install {{ theme_slug }} --activate --allow-root --path={{ wp_path }}
  args: { executable: /bin/bash }

# ─── STARTER PAGES ───────────────────────────────────────────── #
- name: Ensure starter pages exist ({{ site.domain }})
  shell: |
    slug=$(echo "{{ item }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-') &&
    wp post list --post_type=page --field=ID --name=$slug --allow-root --path={{ wp_path }} | head -n1 \
    || wp post create --post_type=page --post_title='{{ item }}' --post_status=publish \
       --porcelain --allow-root --path={{ wp_path }}
  loop: "{{ starter_pages }}"
  register: page_create
  changed_when: "'Created' in page_create.stdout"


########################################################################
#  Starter Templates (plugin + import)                                 #
########################################################################
- name: install and activate starter Templates
  shell: >
    wp plugin install astra-sites --activate
    --allow-root --path={{ wp_path }} --quiet
  args:
    executable: /bin/bash
  register: st_plugin
  changed_when: "'Installing' in st_plugin.stdout or 'Downloading' in st_plugin.stdout"

###############################################################################
# Asegurar uploads y subcarpeta del importador                                #
###############################################################################
- name: Crear wp-content/uploads si no existe
  file:
    path: "{{ wp_path }}/wp-content/uploads"
    state: directory
    owner: "{{ linux_owner }}"
    group: "{{ linux_owner }}"
    mode: "0755"
  ignore_errors: true

- name: Crear subcarpeta st-importer
  file:
    path: "{{ wp_path }}/wp-content/uploads/st-importer"
    state: directory
    owner: "{{ linux_owner }}"
    group: "{{ linux_owner }}"
    mode: "0755"

########################################################################
#  IMPORTAR kit “Personal Portfolio” (About-Me)                        #
########################################################################

- name: DEBUG · ver comando exacto
  debug:
    msg: >
      wp starter-templates import {{ template }} --yes
      --path={{ wp_path }} --allow-root


- name: Importar kit Starter Templates
  shell: >
    wp --path={{ wp_path }} --allow-root starter-templates import {{ template }} --yes --quiet
  register: st_import

  changed_when: "'Import complete' in st_import.stdout or 'Import finished'  in st_import.stdout or 'Imported Form' in st_import.stdout"

  failed_when: >
    ('Import complete' not in st_import.stdout and 'Import finished'  not in st_import.stdout)



# ─── PLUGINS ─────────────────────────────────────────────────── #
- name: Ensure plugins present / up-to-date
  shell: >
    wp plugin install {{ item.slug }}
    {% if item.state == 'latest' %} --force {% endif %}
    {%- if item.activate %} --activate {% endif %}
    --allow-root --path={{ wp_path }}
  loop: "{{ plugins }}"
  loop_control: { label: "{{ item.slug }}" }
  register: plug
  changed_when: "'Installing' in plug.stdout or 'Downloading' in plug.stdout"

# ─── DEMO DATA (OCDI) – runs only if JSON exists ─────────────── #
- name: Import demo content (if present)
  shell: |
    test -f {{ wp_path }}/wp-content/themes/{{ theme_slug }}/inc/demo-content.json &&
    wp ocdi import {{ wp_path }}/wp-content/themes/{{ theme_slug }}/inc/demo-content.json \
       --allow-root --path={{ wp_path }} || true
  args: { executable: /bin/bash }

# ─── MAIN MENU ───────────────────────────────────────────────── #
- name: Ensure “Main” menu exists
  shell: |
    wp menu list --format=ids --name="Main" --allow-root --path={{ wp_path }} | head -n1 \
    || wp menu create "Main" --porcelain --allow-root --path={{ wp_path }}
  register: menu_id_raw
  changed_when: "'Created' in menu_id_raw.stdout"

- set_fact:
    menu_id: >-
      {{ (menu_id_raw.stdout_lines[-1] | int) if 'Created' in menu_id_raw.stdout
         else (menu_id_raw.stdout | int) }}

- name: Add pages to Main menu
  shell: |
    PAGE_ID=$(wp post list --post_type=page --field=ID --name={{ item.key }} --allow-root --path={{ wp_path }} | head -n1) &&
    wp menu item add-post {{ menu_id }} $PAGE_ID --title='{{ item.value }}' \
      --allow-root --path={{ wp_path }} 2>/dev/null || true
  loop: "{{ menu_items | dict2items }}"
  loop_control: { label: "{{ item.value }}" }
  args: { executable: /bin/bash }

# ─── PRETTY PERMALINKS ───────────────────────────────────────── #
- name: Pretty permalinks (/%postname%/)
  shell: wp rewrite structure '/%postname%/' --allow-root --path={{ wp_path }}
  register: perm
  changed_when: "'Success' in perm.stdout"

########################################################################
#  Forzar HTTPS: actualizar siteurl/home y reemplazar todas las URLs   #
########################################################################
- name: Asegurar que siteurl y home usan https
  shell: |
    wp option update siteurl "https://{{ site.domain }}" --allow-root --path={{ wp_path }} --quiet
    wp option update home    "https://{{ site.domain }}" --allow-root --path={{ wp_path }} --quiet

# Reemplazar http → https en todo el contenido (salta la columna GUID)
- name: Reemplazar todas las URLs http -> https
  shell: |
    wp search-replace "http://{{ site.domain }}" "https://{{ site.domain }}" \
      --skip-columns=guid --precise --all-tables --allow-root --path={{ wp_path }} --quiet

# Regenerar CSS/JS de Elementor para que use https
- name: Regenerar CSS y fuentes de Elementor
  shell: wp elementor tools regenerate-css --allow-root --path={{ wp_path }} --quiet
  args:
    warn: false          # ignora el warning si Elementor no está instalado


# ─── OPTIONAL CHILD THEME & TEMPLATES ────────────────────────── #
- name: Scaffold & activate child theme
  when: child_theme
  shell: >
    wp scaffold child-theme "{{ theme_slug }}-child" --parent_theme={{ theme_slug }}
    --allow-root --path={{ wp_path }} --activate
  args:
    creates: "{{ wp_path }}/wp-content/themes/{{ theme_slug }}-child/style.css"

- name: Copy custom templates into child theme
  when: child_theme and custom_templates | length > 0
  copy:
    src: "templates/{{ item }}"
    dest: "{{ wp_path }}/wp-content/themes/{{ theme_slug }}-child/{{ item }}"
    owner: "{{ linux_owner }}"
    mode: "0644"
  loop: "{{ custom_templates }}"

# ─── FLUSH REWRITE RULES ─────────────────────────────────────── #
- name: Flush rewrite rules
  shell: wp rewrite flush --hard --allow-root --path={{ wp_path }}

# ─── SMOKE-TEST ──────────────────────────────────────────────── #
- name: Verify home page returns 200 ({{ site.domain }})
  uri:
    url: "http://{{ site.host | default(site.domain) }}/"
    status_code: 200
