---
# ---------------------------------------------------------------
# Included by bootstrap-wordpress.yml for each item in wordpress_sites
# Expects "site" dict plus the global vars (theme_slug, starter_pages…)
# ---------------------------------------------------------------

# ─── Local convenience vars ─────────────────────────────────── #
- name: Definir variables locales del sitio
  set_fact:
    wp_path: "/home/semaphore/{{ site.domain }}"
    linux_owner: "{{ site.linux_user | default('www-data') }}"

# # ─── Ensure doc-root exists & correct owner ‐ optional ───────── #
# - name: Ensure {{ wp_path }} exists
#   file:
#     path: "{{ wp_path }}"
#     state: directory
#     owner: "{{ linux_owner }}"
#     mode: "0755"

# (Assumption: core download / config / install already done earlier.)

# ─── THEME ───────────────────────────────────────────────────── #
- name: Install & activate {{ theme_slug }} for {{ site.domain }}
  shell: |
    wp theme is-installed {{ theme_slug }} --allow-root --path={{ wp_path }} \
    || wp theme install {{ theme_slug }} --activate --allow-root --path={{ wp_path }}
  args: { executable: /bin/bash }

# ─── STARTER PAGES ───────────────────────────────────────────── #
- name: Ensure starter pages exist ({{ site.domain }})
  shell: |
    slug=$(echo "{{ item }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '-') &&
    wp post list --post_type=page --field=ID --name=$slug --allow-root --path={{ wp_path }} | head -n1 \
    || wp post create --post_type=page --post_title='{{ item }}' --post_status=publish \
       --porcelain --allow-root --path={{ wp_path }}
  loop: "{{ starter_pages }}"
  register: page_create
  changed_when: "'Created' in page_create.stdout"

# ─── STATIC FRONT PAGE (Home) ────────────────────────────────── #
###############################################################################
# 1 ▸ Crear SIEMPRE la página “Home” y quedarnos con su ID                    #
###############################################################################
# - name: Crear la página Home (porcelana devuelve solo el ID)
#   command: >
#     wp post create
#       --post_type=page
#       --post_title='Home'
#       --post_status=publish
#       --porcelain
#       --path={{ wp_path }}
#       --allow-root
#   register: home_create # ← ID numérico recién creado
#   changed_when: true # siempre marca “changed”
#   args:
#     chdir: /usr/local/bin

# ###############################################################################
# # 2 ▸ Definir Home como portada *solo si no lo está*                          #
# ###############################################################################
# - name: Definir Home como portada (solo si cambia)
#   shell: |
#     CURRENT_FRONT=$(wp option get page_on_front --path={{ wp_path }} --allow-root 2>/dev/null || echo 0)

#     if [ "{{ home_create.stdout | trim }}" != "$CURRENT_FRONT" ]; then
#       wp option update show_on_front page --path={{ wp_path }} --allow-root --quiet
#       wp option update page_on_front {{ home_create.stdout | trim }} --path={{ wp_path }} --allow-root --quiet
#       echo "Success: Front page set to Home ({{ home_create.stdout | trim }})"
#     fi
#   args:
#     executable: /bin/bash
#     chdir: /usr/local/bin
#   register: front_page_cmd
#   changed_when: "'Success: Front page set to Home' in front_page_cmd.stdout"

########################################################################
#  Starter Templates (plugin + import)                                 #
########################################################################
- name: Instalar y activar Starter Templates
  shell: >
    wp plugin install astra-sites --activate
    --allow-root --path={{ wp_path }} --quiet
  args:
    executable: /bin/bash
  register: st_plugin
  changed_when: "'Installing' in st_plugin.stdout or 'Downloading' in st_plugin.stdout"

- name: Importar plantilla pre-construida (si se definió)
  when: site.starter_template_id is defined
  shell: >
    wp starter-templates import {{ site.starter_template_id }} --yes
     --allow-root --path={{ wp_path }}
  args:
    executable: /bin/bash
  register: st_import
  changed_when: "'Import complete' in st_import.stdout or 'Started import' in st_import.stdout"


# Sin filtros: dame el primer kit gratuito de Gutenberg
- name: Obtener un kit gratuito tipo “About-Me”
  shell: |
    wp starter-templates list \
      --type=free --page-builder=gutenberg --format=ids \
      --path={{ wp_path }} | head -n1
  register: kit_id
  changed_when: false
  become: true

- name: Importar ese kit
  shell: wp starter-templates import {{ kit_id.stdout | trim }} --yes --path={{ wp_path }}
  register: st_import
  changed_when: "'Import complete' in st_import.stdout or 'Started import' in st_import.stdout"
  become: true



# ─── PLUGINS ─────────────────────────────────────────────────── #
- name: Ensure plugins present / up-to-date
  shell: >
    wp plugin install {{ item.slug }}
    {% if item.state == 'latest' %} --force {% endif %}
    {%- if item.activate %} --activate {% endif %}
    --allow-root --path={{ wp_path }}
  loop: "{{ plugins }}"
  loop_control: { label: "{{ item.slug }}" }
  register: plug
  changed_when: "'Installing' in plug.stdout or 'Downloading' in plug.stdout"

# ─── DEMO DATA (OCDI) – runs only if JSON exists ─────────────── #
- name: Import demo content (if present)
  shell: |
    test -f {{ wp_path }}/wp-content/themes/{{ theme_slug }}/inc/demo-content.json &&
    wp ocdi import {{ wp_path }}/wp-content/themes/{{ theme_slug }}/inc/demo-content.json \
       --allow-root --path={{ wp_path }} || true
  args: { executable: /bin/bash }

# ─── MAIN MENU ───────────────────────────────────────────────── #
- name: Ensure “Main” menu exists
  shell: |
    wp menu list --format=ids --name="Main" --allow-root --path={{ wp_path }} | head -n1 \
    || wp menu create "Main" --porcelain --allow-root --path={{ wp_path }}
  register: menu_id_raw
  changed_when: "'Created' in menu_id_raw.stdout"

- set_fact:
    menu_id: >-
      {{ (menu_id_raw.stdout_lines[-1] | int) if 'Created' in menu_id_raw.stdout
         else (menu_id_raw.stdout | int) }}

- name: Add pages to Main menu
  shell: |
    PAGE_ID=$(wp post list --post_type=page --field=ID --name={{ item.key }} --allow-root --path={{ wp_path }} | head -n1) &&
    wp menu item add-post {{ menu_id }} $PAGE_ID --title='{{ item.value }}' \
      --allow-root --path={{ wp_path }} 2>/dev/null || true
  loop: "{{ menu_items | dict2items }}"
  loop_control: { label: "{{ item.value }}" }
  args: { executable: /bin/bash }

# ─── PRETTY PERMALINKS ───────────────────────────────────────── #
- name: Pretty permalinks (/%postname%/)
  shell: wp rewrite structure '/%postname%/' --allow-root --path={{ wp_path }}
  register: perm
  changed_when: "'Success' in perm.stdout"

# ─── OPTIONAL CHILD THEME & TEMPLATES ────────────────────────── #
- name: Scaffold & activate child theme
  when: child_theme
  shell: >
    wp scaffold child-theme "{{ theme_slug }}-child" --parent_theme={{ theme_slug }}
    --allow-root --path={{ wp_path }} --activate
  args:
    creates: "{{ wp_path }}/wp-content/themes/{{ theme_slug }}-child/style.css"

- name: Copy custom templates into child theme
  when: child_theme and custom_templates | length > 0
  copy:
    src: "templates/{{ item }}"
    dest: "{{ wp_path }}/wp-content/themes/{{ theme_slug }}-child/{{ item }}"
    owner: "{{ linux_owner }}"
    mode: "0644"
  loop: "{{ custom_templates }}"

# ─── FLUSH REWRITE RULES ─────────────────────────────────────── #
- name: Flush rewrite rules
  shell: wp rewrite flush --hard --allow-root --path={{ wp_path }}

# ─── SMOKE-TEST ──────────────────────────────────────────────── #
- name: Verify home page returns 200 ({{ site.domain }})
  uri:
    url: "http://{{ site.host | default(site.domain) }}/"
    status_code: 200
