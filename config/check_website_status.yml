---
# diagnostico_apache_sin_public_html.yml
# Diagnóstico de errores 500 cuando los sitios están en /home/semaphore
# Autor: ChatGPT (o3) — Mayo 2025

- name: Diagnosticar errores 500 de Apache (sitios en /home/semaphore)
  hosts: localhost
  gather_facts: yes
  become: yes

  vars:
    ansible_remote_tmp: "/tmp/.ansible-123324453"
    ansible_connection: local

    apache_service_name: "{{ 'httpd' if ansible_os_family == 'RedHat' else 'apache2' }}"
    php_fpm_service_name: ""     # Pon '' si no usas PHP-FPM
    error_log_patterns: "*error*.log"
    lines_to_fetch: 200
    fetch_dest: "./logs/{{ inventory_hostname }}/"
    # Directorios donde suele vivir la conf de VirtualHosts
    vhost_conf_paths:
      - "/etc/apache2/sites-enabled"
      - "/etc/apache2/conf-enabled"
      - "/etc/httpd/conf.d"

  tasks:
  # 1. Validar sintaxis ---------------------------------------------------------
  - name: Validar sintaxis de Apache
    command: apachectl -t
    register: apache_syntax
    ignore_errors: true

  - fail:
      msg: |
        ❌ Sintaxis inválida:
        {{ apache_syntax.stderr | default(apache_syntax.stdout) }}
    when: apache_syntax.rc != 0

  - debug:
      msg: "✓ Sintaxis OK: {{ apache_syntax.stdout | trim }}"

  # 2. Asegurar servicios -------------------------------------------------------
  - name: Reiniciar/asegurar {{ apache_service_name }}
    service:
      name: "{{ apache_service_name }}"
      state: restarted
      enabled: yes

  - name: Reiniciar/asegurar PHP-FPM si procede
    service:
      name: "{{ php_fpm_service_name }}"
      state: restarted
      enabled: yes
    when: php_fpm_service_name | length > 0

  # 3. Descubrir DocumentRoots reales ------------------------------------------
  - name: Obtener líneas DocumentRoot de los VirtualHosts
    shell: |
      grep -REi '^[[:space:]]*DocumentRoot[[:space:]]+' {{ vhost_conf_paths | join(' ') }} 2>/dev/null \
      | awk '{print $2}' | sort -u
    register: docroot_raw
    changed_when: false

  - name: Filtrar solo rutas dentro de /home/semaphore
    set_fact:
      docroots: "{{ docroot_raw.stdout_lines | select('search', '^/home/semaphore') | list }}"

  - name: Aviso si no se encontró ningún DocumentRoot en /home/semaphore
    debug:
      msg: "⚠️  No se detectaron DocumentRoots en /home/semaphore."
    when: docroots | length == 0

  # 4. Probar HTTP local --------------------------------------------------------
  - name: curl localhost (código HTTP)
    shell: curl -s -o /dev/null -w "%{http_code}\n" http://127.0.0.1/
    register: curl_root
    changed_when: false
    failed_when: false

  - debug:
      msg: "Código HTTP raíz: {{ curl_root.stdout }}"

  # 5. Logs de error ------------------------------------------------------------
  - name: Localizar error logs
    find:
      paths:
        - "/var/log/{{ apache_service_name }}"
        - "/var/log/apache2"
        - "/var/log/httpd"
      patterns: "{{ error_log_patterns }}"
      recurse: yes
    register: error_logs

  - name: Guardar últimas {{ lines_to_fetch }} líneas de cada log en /tmp
    shell: |
      tail -n {{ lines_to_fetch }} {{ item.path }} > /tmp/{{ inventory_hostname }}_{{ item.path | basename }}
    loop: "{{ error_logs.files }}"
    when: error_logs.matched > 0

  - name: Crear carpeta local donde guardar los logs
    delegate_to: localhost
    run_once: true
    file:
      path: "{{ fetch_dest }}"
      state: directory
      mode: "0755"

  - name: Descargar logs al controlador
    fetch:
      src: "/tmp/{{ inventory_hostname }}_{{ item.path | basename }}"
      dest: "{{ fetch_dest }}"
      flat: yes
    loop: "{{ error_logs.files }}"
    when: error_logs.matched > 0
    loop_control:
      label: "{{ item.path | basename }}"

  # 6. Revisar permisos de cada DocumentRoot ------------------------------------
  - name: Verificar permisos/propietarios
    stat:
      path: "{{ item }}"
    loop: "{{ docroots }}"
    register: doc_stats
    failed_when: false

  - name: Resumen de permisos
    debug:
      msg: |
        {{ item.stat.path }} → owner: {{ item.stat.pw_name }}
        group: {{ item.stat.gr_name }}  mode: {{ '%04o' % item.stat.mode }}
    loop: "{{ doc_stats.results }}"

  # 7. Conclusión ---------------------------------------------------------------
  - debug:
      msg: |
        📝 Revisa los logs copiados en «{{ fetch_dest }}».
        Corrige errores detectados (PHP Fatal, permisos, módulos faltantes, etc.).
...
